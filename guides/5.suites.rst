Telling How To Test - Test Suites
=================================

We already talked about configuring multiple contexts for a single test
suite in a `previous chapter </guides/4.contexts>`. Now it is time to talk
about test suites themselves. Test suite represents a group of concrete
features together with the information on how to test them.

With suites you can configure Behat to test different kind of features
using different kind of contexts and doing so in one run. Test suites are
really powerful and ``behat.yml`` makes them that much more powerful:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            core_features:
                paths:    [ %paths.base%/features/core ]
                contexts: [ CoreDomainContext ]
            user_features:
                paths:    [ %paths.base%/features/web ]
                filters:  { role: user }
                contexts: [ UserContext ]
            admin_features:
                paths:    [ %paths.base%/features/web ]
                filters:  { role: admin }
                contexts: [ AdminContext ]

Suite Paths
-----------

One of the most obvious setting of the suites is the ``paths``
configuration:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            core_features:
                paths:
                    - %paths.base%/features
                    - %paths.base%/test/features
                    - %paths.base%/vendor/.../features

As you could imagine, this option tells Behat where to search features
for a test. You could, for example, tell Behat to look into
``features/web`` folder for features and test them with ``WebContext``:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            web_features:
                paths:    [ %paths.base%/features/web ]
                contexts: [ WebContext ]

You then might want to also describe some API-specifc features in
``features/api`` and test them with API-specifc ``ApiContext``. Easy:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            web_features:
                paths:    [ %paths.base%/features/web ]
                contexts: [ WebContext ]
            api_features:
                paths:    [ %paths.base%/features/api ]
                contexts: [ ApiContext ]

This will cause Behat to:

#. Find all features inside ``features/web`` and test them using your
   ``WebContext``.

#. Find all features inside ``features/api`` and test them using your
   ``ApiContext``.

.. note::

    ``%paths.base`` is a special variable in ``behat.yml`` that refers
    to the folder in which ``behat.yml`` is stored.

Path-based suites is an easy way to test highly-modular applications
where features are delivered by highly decoupled components. With suites
you can test all of them together.

Suite Filters
-------------

In addition to being able to run features from different directories,
we can run scenarios from same directory, but filtered by a specific
criteria. Gherkin parser comes bundled with a set of cool filters
such as *tags* and *name* filters. You can use these filters to run
features with specific tag (or name) in specific contexts:

.. code-block::

    # behat.yml

    default:
        suites:
            web_features:
                paths:    [ %paths.base%/features ]
                contexts: [ WebContext ]
                filters:
                    tags: @web
            api_features:
                paths:    [ %paths.base%/features ]
                contexts: [ ApiContext ]
                filters:
                    tags: @api

This configuration will tell Behat to run features and scenarios
tagged as ``@web`` in ``WebContext`` and features and scenarios
tagged as ``@api`` in ``ApiContext``. Even if they all are stored
in the same folder. How cool is that? It could be even cooler,
because Gherkin 4+ (used in Behat 3+) added a very special *role*
filter. It means, you now could have nice actor-based suites:

.. code-block::

    # behat.yml

    default:
        suites:
            user_features:
                paths:    [ %paths.base%/features ]
                contexts: [ UserContext ]
                filters:
                    role: user
            admin_features:
                paths:    [ %paths.base%/features ]
                contexts: [ AdminContext ]
                filters:
                    role: admin

Role filter takes a look into the feature description block:

.. code-block:: gherkin

    Feature: Registering users
      In order to help more people use our system
      As an admin
      I need to be able to register more users

It looks for a ``As a ...`` or ``As an ...`` pattern and guesses
actor from it. It then filters features that do not have expected
actor from the set. In case of our example, it basically means that
features described from the perspective of the *user* actor will
be tested in ``UserContext`` and features described from the
perspective of the *admin* actor will be tested in ``AdminContext``.
Even if they are in the same folder.

Suite Contexts
--------------

Being able to specify set of features with set of contexts for
these features inside the suite has a very interesting side-effect.
You can specify same features in two different suites being tested
against different contexts *or* same contexts configured differently.
This basically means that you could use same subset of features to
drive out development of different layers of your application with
Behat:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            domain_features:
                paths:    [ %paths.base%/features ]
                contexts: [ DomainContext ]
            web_features:
                paths:    [ %paths.base%/features ]
                contexts: [ WebContext ]
                filters:
                    tags: @web

In this case, Behat will run same all features from the ``features/``
folder first in ``DomainContext`` and then ones of them tagged with
``@web`` in ``WebContext``.

Executing Suites
----------------

By default, when you run Behat it will execute all registered suites
one-by-one. If you want to run a single suite instead, use ``--suite``
option:

.. code-block:: bash

    $ vendor/bin/behat --suite=web_features

Suite Initialisaation
---------------------

Suites are the core part of Behat. Any feature of Behat knows about
them and can give you a hand with them. For example, if you defined
your suites in ``behat.yml`` before running ``--init``, it will actually
create you a folders and suites you configured instead of default ones.


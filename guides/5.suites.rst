Configurando Suite de Testes
============================

Nós já falamos sobre a configuração de contextos múltiplos para uma única suite 
de testes em um :doc:`capítulo anterior </guides/4.contexts>`. Agora é a hora de 
falarmos sobre suite de testes mesmo. Uma suite de teste representa um grupo de 
funcionalidades concretas juntas com a informação de como as testar.

Com suites você pode configurar o Behat para testar diferentes tipos de funcionalidades 
utilizando diferentes tipos de contextos e fazendo-o em uma única execução. Suites de 
Testes são realmente poderosas e o ``behat.yml`` faz delas muito mais poderosas:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            principal_features:
                paths:    [ %paths.base%/features/principal ]
                contexts: [ PrincipalContext ]
            usario_features:
                paths:    [ %paths.base%/features/web ]
                filters:  { role: usuario }
                contexts: [ UsuarioContext ]
            administrador_features:
                paths:    [ %paths.base%/features/web ]
                filters:  { role: administrador }
                contexts: [ AdministradorContext ]

Caminhos de Suite
-----------------

Uma das configurações mais óbvias das suites é a configuração 
de ``caminhos``:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            principal_features:
                paths:
                    - %paths.base%/features
                    - %paths.base%/test/features
                    - %paths.base%/vendor/.../features

Como vocẽ pode imaginar, esta opção diz ao Behat onde é para buscar as funcionalidades 
de teste. Você poderia, por exemplo, dizer ao Behat para procurar no arquivo ``features/web`` 
por funcionalidades e testá-los com ``WebContext``:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            web_features:
                paths:    [ %paths.base%/features/web ]
                contexts: [ WebContext ]

Você então pode precisar também descrever alguma funcionalidade para uma API-específica 
em ``features/api`` e testá-las com um ``ApiContext``. Fácil:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            web_features:
                paths:    [ %paths.base%/features/web ]
                contexts: [ WebContext ]
            api_features:
                paths:    [ %paths.base%/features/api ]
                contexts: [ ApiContext ]

Isto fará com que o Behat:

#. Encontre todas as funcionalidades em ``features/web`` e testá-las usando sua ``WebContext``.

#. Encontre todas as funcionalidades em ``features/api`` e testá-las usando sua ``ApiContext``.

.. note::

    ``%paths.base%`` é uma variável especial em ``behat.yml`` que se refere ao arquivo em que 
    o ``behat.yml`` está armazenado.

As suites Path-Based são um fácil modo de testar aplicações altamente modulares onde as 
funcionalidades são entregues por componentes altamente desacoplados. Com suites você pode 
testar todos eles juntos.

Filtros de Suite
----------------

Além de ser capaz de executar funcionalidades de diretórios diferentes, nós podemos executar 
cenários do mesmo diretório, mas filtrado por critério específico. O analisador do Gherkin 
vem empacotado com uma coleção de filtros legais tal como filtros de *tags* e *nome*. Você 
pode utilizar estes filtros ao executar funcionalidades com uma tag (ou nome) específicas em 
contextos específicos:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            web_features:
                paths:    [ %paths.base%/features ]
                contexts: [ WebContext ]
                filters:
                    tags: @web
            api_features:
                paths:    [ %paths.base%/features ]
                contexts: [ ApiContext ]
                filters:
                    tags: @api

Esta configuração irá dizer ao Behat para executar funcionalidades e cenários com a tag 
``@web`` em ``WebContext`` e funcionalidades e cenários com a tag ``@api`` em ``ApiContext``. 
Mesmo se todos eles estão armazenados no mesmo arquivo. Como isso é legal? Mas fica ainda mais, 
por que o Gherkin 4+ (usado no Behat 3+) adicionado um filtro muito especial *role*. Que 
significa, que você agora pode ter uma boa suite baseada em ator:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            usuario_features:
                paths:    [ %paths.base%/features ]
                contexts: [ UsuarioContext ]
                filters:
                    role: usuario
            administrador_features:
                paths:    [ %paths.base%/features ]
                contexts: [ AdministradorContext ]
                filters:
                    role: administrador

Uma Função filtro 

A Role filter takes a look into the feature description block:

.. code-block:: gherkin

    Feature: Registering users
      In order to help more people use our system
      As an admin
      I need to be able to register more users

It looks for a ``As a ...`` or ``As an ...`` pattern and guesses its
actor from it. It then filters features that do not have the expected
actor from the set. In the case of our example, it basically means that
features described from the perspective of the *user* actor will
be tested in ``UserContext`` and features described from the
perspective of the *admin* actor will be tested in ``AdminContext``.
Even if they are in the same folder.

Suite Contexts
--------------

Being able to specify a set of features with a set of contexts for
these features inside the suite has a very interesting side-effect.
You can specify the same features in two different suites being tested
against different contexts *or* the same contexts configured differently.
This basically means that you can use the same subset of features to
develop different layers of your application with Behat:

.. code-block:: yaml

    # behat.yml

    default:
        suites:
            domain_features:
                paths:    [ %paths.base%/features ]
                contexts: [ DomainContext ]
            web_features:
                paths:    [ %paths.base%/features ]
                contexts: [ WebContext ]
                filters:
                    tags: @web

In this case, Behat will first run all the features from the ``features/``
folder in ``DomainContext`` and then only those tagged with ``@web`` in ``WebContext``.

Executing Suites
----------------

By default, when you run Behat it will execute all registered suites
one-by-one. If you want to run a single suite instead, use the ``--suite``
option:

.. code-block:: bash

    $ vendor/bin/behat --suite=web_features

Suite Initialisation
---------------------

Suites are a core part of Behat. Any feature of Behat knows about
them and can give you a hand with them. For example, if you defined
your suites in ``behat.yml`` before running ``--init``, it will actually
create the folders and suites you configured, instead of the default ones.

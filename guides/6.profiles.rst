Configuration - ``behat.yml``
=============================

Behat has a very powerful configuration system based on ``YAML`` configuration files and
profiles.

``behat.yml``
-------------

All configuration happens inside a single configuration file in the ``YAML``
format. Behat tries to load ``behat.yml`` or ``config/behat.yml`` by default,
or you can tell Behat where your config file is with the ``--config`` option:

.. code-block:: bash

    $ behat --config custom-config.yml

All configuration parameters in that file are defined under a profile name root
(``default:`` for example). A profile is just a custom name you can use to
quickly switch testing configuration by using the ``--profile`` option when
executing your feature suite.

The default profile is always ``default``. All other profiles inherit
parameters from the ``default`` profile. If you only need one profile, define
all of your parameters under the ``default:`` root:

.. code-block:: yaml

    # behat.yml
    default:
        #...

Environment Variable - BEHAT_PARAMS
-----------------------------------

If you want to set up configurable Behat settings, use the ``BEHAT_PARAMS``
environment variable:

.. code-block:: bash

    export BEHAT_PARAMS='{"extensions" : {"Behat\\MinkExtension" : {"base_url" : "https://www.example.com/"}}}'

You can set any value for any option that is available in a ``behat.yml`` file.
Just provide options in *JSON* format.  Behat will use those options as defaults.
You can always override them with the settings in the project ``behat.yml`` file (it has higher priority).

.. tip::

    In order to specify a parameter in an environment variable, the value *must not* exist in your ``behat.yml``

.. tip::

    NOTE: In Behat 2.x this variable was in *URL* format.  It has been changed to use *JSON* format.


Global Filters
--------------

While it is possible to specify filters as part of suite configuration, sometimes you will want to 
exclude certain scenarios across the suite, with the option to override the filters at the command line.

This is achieved by specifying the filter in the gherkin configuration:

.. code-block:: yaml

    # behat.yml

    default:
        gherkin:
          filters:
            tags: ~@wip
            
In this instance, scenarios tagged as @wip will be ignored unless the CLI command is run with a custom filter, e.g.:

.. code-block:: bash

    vendor/bin/behat --tags=wip

Relocating Autoloaded Files and Feature Descriptions
----------------------------------------------------

Generally web frameworks have a conventional place for test-related
files. When starting a new project or incorporating Behat into an
existing one, putting the ``features`` folder into the expected place
makes it easier for everyone to find and maintain tests.  Since
feature descriptions and their associated context classes are closely
related, it makes sense to store them together. To do so, Behat needs
to be told where to find things. The following behat.yml snippet is
taken from a Laravel project:

.. code-block:: yaml


    default:
	autoload:
		'': %paths.base%/app/tests/features/bootstrap
	suites:
	    cart:
		paths: [ %paths.base%/app/tests/features/cart ]
		contexts: [ CartContext ]

**Notes**

- The "autoload" section instructs Behat where to look for the context
  PHP class files.

  
- The "suites" section instructs behat where to look for feature
  descriptions related to the "cart" feature of the website. The
  "paths" directive defines the directory location where individual
  feature files can be found. The contexts" directive names the actual
  PHP classes to load for this test suite. These classes are the ones
  discovered via the "autoload" section above.

  
- Suites are explained in :doc:`previous chapter </guides/5.suites>`,
  but, briefly, they are a way of organizing related tests into
  subdirectories so that a large set of tests does not become
  unwieldy. Here, we're focusing on the "cart" feature, but to expand
  on the idea, the complete project might have "checkout" and
  "knowledgebase" suites, each located in a separate subdirectory,
  with a corresponding class in the autoload directory.


PHP Namespaces
--------------

If you wish to namespace your features (for example: to be PSR-1
complaint) you will need to add the namespace to the classes and also
tell behat where to load them. Here ``contexts`` is an array of
classes:

.. code-block:: yaml


    # behat.yml

    default:
        autoload:
            '': %paths.base%/app/features/bootstrap
        suites:
            default:
                contexts: [My\Application\Namespace\Bootstrap\FeatureContext]

.. note::

    Using ``behat.yml`` to autoload will only allow for ``PSR-0``
    You can also use ``composer.json`` to autoload, which will also
    allow for ``PSR-4``
    
Formatters
----------

Default formatters can be enabled by specifying them in the profile.

.. code-block:: yaml

    # behat.yml

    default:
        formatters:
            pretty: true

Extensions
----------

Extensions can be configured like this:

.. code-block:: yaml

    # behat.yml
    
    default:
    	extensions:
            Behat\MinkExtension:
                base_url: http://www.example.com
            	selenium2: ~

